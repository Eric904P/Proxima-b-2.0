using System;
using System.Collections.Generic;
using Proxima.Core.Commons.Randoms;

namespace Proxima.Core.MoveGenerators.MagicBitboards.Keys
{
    /// <summary>
    /// Represents a set of methods to generate magic keys.
    /// </summary>
    public class MagicKeyGenerator
    {
        private Random64 _random64;

        /// <summary>
        /// Initializes a new instance of the <see cref="MagicKeyGenerator"/> class.
        /// </summary>
        public MagicKeyGenerator()
        {
            _random64 = new Random64();
        }

        /// <summary>
        /// Generates a magic key for the specified patterns. These keys are generated by brute-force trial and error,
        /// so it will take some amount of time.
        /// </summary>
        /// <param name="patterns">The list of patterns.</param>
        /// <param name="maskLength">The mask length.</param>
        /// <returns>The magic key.</returns>
        public ulong GenerateKey(List<FieldAttackPattern> patterns, int maskLength)
        {
            var attacks = new ulong[MagicConstants.RookMaxMovesPerField];

            var key = 0ul;
            var fail = true;

            while (fail)
            {
                key = GenerateRandomKey();
                fail = false;

                Array.Clear(attacks, 0, MagicConstants.RookMaxMovesPerField);

                foreach (var pattern in patterns)
                {
                    var hash = (pattern.Occupancy * key) >> (64 - maskLength);

                    if (attacks[hash] != 0 && attacks[hash] != pattern.Attacks)
                    {
                        fail = true;
                        break;
                    }

                    attacks[hash] = pattern.Attacks;
                }
            }

            return key;
        }

        /// <summary>
        /// Generates a random magic key.
        /// </summary>
        /// <remarks>
        /// Experiments has shown that the best magic keys have a small number of set bits. The simplest method
        /// is "and" operation on three 64-bit random numbers.
        /// </remarks>
        /// <returns>The random magic key.</returns>
        private ulong GenerateRandomKey()
        {
            return _random64.Next() & _random64.Next() & _random64.Next();
        }
    }
}
